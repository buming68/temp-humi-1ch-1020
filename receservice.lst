C51 COMPILER V9.59.0.0   RECESERVICE                                                       05/11/2023 16:22:32 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE RECESERVICE
OBJECT MODULE PLACED IN .\OUTPUT\receservice.obj
COMPILER INVOKED BY: D:\Keil_C51\C51\BIN\C51.EXE SYSTEM\receservice.c LARGE OPTIMIZE(8,SPEED) BROWSE INCDIR(.\USER;.\SYS
                    -TEM;.\HARDWARE) DEBUG OBJECTEXTEND PRINT(.\receservice.lst) TABS(2) OBJECT(.\OUTPUT\receservice.obj)

line level    source

   1          #include  "receservice.h"
   2          
   3          //extern uint8 Uart1_SEND_Buffer[SEND_MAX_LEN];   //发送缓冲区
   4          //extern uint8 CHNUM;
   5          float fTempM[10]=0 ;      //8路温度全局变量,初始化为0度
   6          
   7          /******************************************************
   8          函数名：uart1_rece_proc(void)
   9          功能：处理串口接收的有效数据
  10          参数：无参数
  11          *******************************************************/
  12          void uart1_rece_proc(void)
  13          {
  14   1          unsigned char strTemp[20];
  15   1          uint8 i;
  16   1      
  17   1          if(Recv_OK)
  18   1          { 
  19   2            uart1_rece_ack();       //向主机回送测温信息；向串口发送数据
  20   2            
  21   2            S1_USE_P30P31();          //串口1切换到 P30 P31 调试口，输出        
  22   2          
  23   2            sprintf(strTemp, "%d-%d%% ", (int)fTempM[0],(int)fTempM[1]); //浮点数转成字符串 
  24   2            SendStringByUart1(strTemp);       //串口打印出温度值
  25   2            
  26   2            if(Uart1_RX_Buffer[0] == 0xC1)    //仅输出LORA设置返回信息
  27   2            {
  28   3              for(i=0; i<Recv_Cnt; i++)
  29   3              {
  30   4                  SendDataByUart1(Uart1_RX_Buffer[i]);
  31   4              }   
  32   3            }
  33   2            
  34   2            S1_USE_P36P37();          //串口1切换回 P36,P37
  35   2      
  36   2      
  37   2            REN = 1;              //允许串口接收
  38   2            Recv_Cnt = 0;         //串口1接收计数清0
  39   2            Recv_OK = 0;          //清串口1接收标志
  40   2          } 
  41   1      }
  42          
  43          /******************************************************
  44          函数名：uart1_auto_tx(void)
  45          功能：自动定时发送8个传感器的温度
  46          参数：无参数
  47          *******************************************************/
  48          void uart1_auto_tx(void)
  49          {     
  50   1          uint16 crc16bit;  
  51   1        
  52   1          Recv_Cnt = 8;
  53   1            
  54   1          Uart1_RX_Buffer[0] = BaudAddr[1];   //从站地址
C51 COMPILER V9.59.0.0   RECESERVICE                                                       05/11/2023 16:22:32 PAGE 2   

  55   1          Uart1_RX_Buffer[1] = 0x03;          //模拟查询功能码 03
  56   1          Uart1_RX_Buffer[2] = 0x00;
  57   1          Uart1_RX_Buffer[3] = 0x00;
  58   1          Uart1_RX_Buffer[4] = 0x00;
  59   1          Uart1_RX_Buffer[5] = 0x02;          //读取2个温度和湿度数值
  60   1      //    if(CHNUM == 1)  Uart1_RX_Buffer[5] = 0x01;          //读取1个温度数值
  61   1        
  62   1          crc16bit = crc16(Uart1_RX_Buffer, Recv_Cnt - 2);    //计算CRC
  63   1          Uart1_RX_Buffer[6] = crc16bit /256;   
  64   1          Uart1_RX_Buffer[7] = crc16bit %256; 
  65   1      
  66   1          uart1_rece_ack();       //向主机回送测温信息；自动回传  
  67   1        
  68   1          REN = 1;              //允许串口接收
  69   1          Recv_Cnt = 0;         //串口1接收计数清0
  70   1          Recv_OK = 0;          //清串口1接收标志
  71   1      }
  72          
  73          /******************************************************
  74          函数名：uart1_rece_ack()
  75          功能：根据接收到的Uart1_RX_Buffer[]数据，向上位机返回发送数据
  76          参数：无参数（处理全局数组）
  77          *******************************************************/
  78          void uart1_rece_ack()       //向主机回送测温信息；
  79          {
  80   1      //  uint8 Uart1_RX_Buffer[8] = {0x30,0x03,0x00,0x00,0x00,0x01,0x80,0x2B};  //校验码 802B
  81   1      //  uint8 Uart1_RX_Buffer[8] = {0x30,0x03,0x00,0x00,0x00,0x02,0xC0,0x2A};
  82   1      //  uint8 Uart1_RX_Buffer[8] = {0x00,0x03,0x00,0x00,0x00,0x01,0x85,0xDB};  //广播测试地址
  83   1      //  uint8 Uart1_RX_Buffer[8] = {0x00,0x03,0x00,0x01,0x00,0x01,0xD4,0x1B};  //查询从机地址49=0x31
  84   1      //  uint8 Uart1_RX_Buffer[8] = {0x00,0x06,0x00,0x01,0x00,0x31,0x18,0x0F};  //设置从机地址
  85   1      //  uint8 Uart1_RX_Buffer[8] = {0x00,0x06,0x00,0x25,0x55,0xAA,0x26,0xFF};  //软件复位命令
  86   1      //  uint8 Uart1_RX_Buffer[8] = {0x30,0x03,0x00,0x00,0x00,0x02,0xC0,0x2A};  //双路温度回传命令
  87   1      //  uint8 Uart1_RX_Buffer[8] = {0x30,0x03,0x00,0x00,0x00,0x03,0x01,0xEA};  //三路温度回传命令
  88   1      //  uint8 Uart1_RX_Buffer[8] = {0x00,0x06,0x01,0x09,0x12,0x34,0x54,0x92};  //恢复出厂设置命令05 01 00 
  89   1      //  uint8 Recv_Cnt = 8;
  90   1        
  91   1        uint16 crc16bit;  
  92   1        uint8 send_cnt = 0;
  93   1        uint8 rsp_cnt, err=RECV_NO_ERROR;
  94   1        uint8 i;
  95   1        
  96   1        crc16bit = crc16(Uart1_RX_Buffer, Recv_Cnt - 2);
  97   1        if(memcmp(Uart1_RX_Buffer + Recv_Cnt - 2 , &crc16bit, 2)==0)
  98   1        {       
  99   2            memcpy(Uart1_SEND_Buffer, Uart1_RX_Buffer, 2);    //modbus addr + func code
 100   2          
 101   2            rsp_cnt = Modbus_Req_Func_Match(Uart1_RX_Buffer+1, Recv_Cnt, Uart1_SEND_Buffer+2,&err);
 102   2            if(rsp_cnt == 0)           //帧长度错误时，rsp_cnt为0，不处理
 103   2              return;
 104   2      
 105   2            if (err != RECV_NO_ERROR){
 106   3                Uart1_SEND_Buffer[1] += 0x80;
 107   3                Uart1_SEND_Buffer[2] = err;
 108   3                rsp_cnt = 3;
 109   3            }
 110   2            else rsp_cnt += 2;         //返回pdu长度不包含地址和功能码
 111   2            
 112   2            send_cnt = rsp_cnt;         //发送的有效数据长度；不含2位CRC
 113   2            
 114   2            crc16bit = crc16(Uart1_SEND_Buffer, send_cnt);  //获CRC16
 115   2            Uart1_SEND_Buffer[send_cnt] = crc16bit>>8 ;
 116   2            Uart1_SEND_Buffer[send_cnt+1] = crc16bit;
C51 COMPILER V9.59.0.0   RECESERVICE                                                       05/11/2023 16:22:32 PAGE 3   

 117   2      
 118   2            TXEN485 = 1;      //控制485发送功能，需要发送时设定
 119   2            for(i=0; i<send_cnt+2; i++)
 120   2            {
 121   3              SendDataByUart1(Uart1_SEND_Buffer[i]);      //发送应答回送数据
 122   3            }   
 123   2            TXEN485 = 0;      //控制485接收功能
 124   2        }
 125   1        
 126   1      }
 127          
 128          //Modbus命令请求功能码匹配
 129          /**
 130            *   正常情况下返回响应帧全部payload的字节数，不包括帧头的modbus地址，功能码，和帧尾CRC校验个数
 131            *   请求帧长度错误时，返回0
 132            *   非法的请求地址、长度或数据值时和设备服务故障时，err不为0，返回-1
 133           */
 134          uint8 Modbus_Req_Func_Match(uint8 *recv_pdu, uint8 recv_cnt, uint8 *send_pdu, uint8 *err)
 135          {
 136   1          uint8 rsp_cnt;
 137   1          uint8 func_code;
 138   1          
 139   1          func_code = *recv_pdu++;
 140   1      
 141   1          switch(func_code){            //只支持04、06功能码
 142   2              case READ_COIL:           //01、02功能码使用时不作区分
 143   2              case READ_INPUT_COIL:*err = ILLEGAL_FUNCTION;break;  //不支持的功能码先返回01错误码
 144   2              case READ_HOLD_REG:       //03、04功能码使用时不作区分
 145   2              case READ_INPUT_REG:      //04功能码
 146   2                    rsp_cnt=Read_Mb_Reg_Rsp(recv_pdu, recv_cnt, send_pdu, err);
 147   2                    break;
 148   2              case WRITE_COIL:
 149   2              case WRITE_HOLD_REG:      //08功能码
 150   2                    rsp_cnt=Write_Mb_Reg_Rsp(recv_pdu, recv_cnt, send_pdu, err);
 151   2                    break;
 152   2              case WRITE_MULTI_COIL:
 153   2              case WRITE_MULTI_REG:
 154   2              default:*err = ILLEGAL_FUNCTION;break;              //不支持的功能码先返回01错误码
 155   2          }
 156   1          return rsp_cnt;
 157   1      }
 158          
 159          //读单个寄存器值，功能码0x03、0x04
 160          uint8 Read_Mb_Reg_Rsp(uint8 *req_pdu, uint8 recv_cnt, uint8 *send_pdu, uint8 *err)
 161          {
 162   1          uint16 req_addr,req_len,pdu_len;
 163   1          uint16 *pdu_ptr;
 164   1        
 165   1          if(recv_cnt != 8)           //功能码03、04的请求长度只能为8byte 
 166   1              return 0;
 167   1      
 168   1        pdu_ptr = (uint16 *)req_pdu;
 169   1        req_addr =  (*pdu_ptr++)*1000;
 170   1        req_len  = *pdu_ptr;
 171   1        
 172   1        if(req_len == 0 || req_len > 125    //标准请求帧读出的总长度
 173   1          || req_len > (SEND_MAX_LEN-5)/2){ //本地发送限制
 174   2          *err = ILLEGAL_DATA_LEN;
 175   2          return -1;
 176   2        }
 177   1      
 178   1        *send_pdu++ = pdu_len = 2 * req_len;
C51 COMPILER V9.59.0.0   RECESERVICE                                                       05/11/2023 16:22:32 PAGE 4   

 179   1        pdu_ptr = (uint16 *)send_pdu;
 180   1        
 181   1        while(req_len--){
 182   2          *pdu_ptr++ = Read_Modbus_Reg(req_addr++, err);  //按地址读取对应的数值
 183   2          if(*err != RECV_NO_ERROR)
 184   2            return -1;
 185   2        }
 186   1          return pdu_len+1;
 187   1      }
 188          
 189          //读modbus寄存器点表,功能码0x03，0x04调用
 190          uint16 Read_Modbus_Reg(uint16 req_addr, uint8 *err)
 191          {
 192   1        uint16 reg = 0xFFFF;   //预留的modbus地址，给个特定返回值以示区别，也可以为0
 193   1          
 194   1        switch(req_addr){
 195   2              case 0:
 196   2                  reg = (int) fTempM[0];
 197   2                  break;
 198   2              case 1:   
 199   2                  reg = (int) fTempM[1] ; 
 200   2                  break;
 201   2              case 2:   
 202   2                  reg = (int) fTempM[2];  
 203   2                  break;
 204   2              case 3:   
 205   2                  reg = (int) fTempM[3];  
 206   2                  break;
 207   2              case 4:
 208   2                  reg = (int) fTempM[4];
 209   2                  break;
 210   2              case 5:   
 211   2                  reg = (int) fTempM[5] ; 
 212   2                  break;
 213   2              case 6:   
 214   2                  reg = (int) fTempM[6];  
 215   2                  break;
 216   2              case 7:   
 217   2                  reg = (int) fTempM[7];  
 218   2                  break;
 219   2              case 8:   
 220   2                  reg = (int) fTempM[8];  
 221   2                  break;        
 222   2              case 9:   
 223   2                  reg = (int) fTempM[9];  
 224   2                  break;
 225   2      
 226   2              //case 8:break;                                           //预留
 227   2              //case 9:break;                                           
 228   2              //case 10:break;                                           
 229   2              case 1000:                  //查询485地址从机地址
 230   2                reg = BaudAddr[1];
 231   2                break;                   
 232   2              case 15000:                 //查询从机是否自动发送，0--不自动，数字---间隔
 233   2                reg = BaudAddr[2];
 234   2                break;  
 235   2              case 3000:                  //查询从机是通讯速率，5--9600 6---19200
 236   2                reg = BaudAddr[0];
 237   2                break; 
 238   2              
 239   2          default:*err=ILLEGAL_DATA_ADDR;break;                   //非法地址
 240   2        }
C51 COMPILER V9.59.0.0   RECESERVICE                                                       05/11/2023 16:22:32 PAGE 5   

 241   1        return reg;
 242   1      }
 243          
 244          //写单个寄存器值，功能码0x06
 245          uint8 Write_Mb_Reg_Rsp(uint8 *req_pdu, uint8 recv_cnt, uint8 *send_pdu, uint8 *err)
 246          {
 247   1          uint16 req_addr,req_data;
 248   1          //uint16 req_len,pdu_len;
 249   1          uint16 *pdu_ptr;
 250   1          uint8 i;
 251   1        
 252   1          if(recv_cnt != 8)           //功能码06的请求长度只能为8byte 
 253   1              return 0;
 254   1      
 255   1          for(i=0; i<4; i++)  *(send_pdu+i) = *(req_pdu+i);
 256   1          
 257   1          pdu_ptr = (uint16 *)req_pdu;
 258   1          req_addr = *pdu_ptr;
 259   1          req_data = (uint16)(*(pdu_ptr+1));
 260   1          Write_Modbus_Reg(req_addr, req_data, err);  //按地址读取对应的数值  
 261   1      
 262   1          return 4;
 263   1      }
 264          
 265          //读modbus寄存器点表,功能码0x06调用
 266          uint16 Write_Modbus_Reg(uint16 req_addr, uint16 req_data, uint8 *err)
 267          {
 268   1        uint16 reg = 0xFFFF;   //预留的modbus地址，给个特定返回值以示区别，也可以为0
 269   1        
 270   1        switch(req_addr){
 271   2              case 1:           //设置从站地址  
 272   2                  BaudAddr[1] = (uint8) req_data;       
 273   2                  EEPROM_write_1(Addr_485, BaudAddr+1); //BaudAddr[1] 写入eeprom
 274   2                  //delay_ms(1);
 275   2                  break;
 276   2              case 0x0025:        //软启动
 277   2                  IAP_CONTR = 0x20;
 278   2                  break;
 279   2              case 0x0109:        //恢复出厂设置 9600，站址1  不自动发送
 280   2                  if(req_data != 0x1234)  break;            //恢复出厂命令：00 06 01 09 12 34 54 92
 281   2                  EEPROM_Factory();
 282   2                  IAP_CONTR = 0x20;                         //重启动
 283   2                  break;  
 284   2              case 0x000F:        //设置是否自动回传，非0：自动回传，0：不回传
 285   2                  BaudAddr[2] = (uint8) req_data;       
 286   2                  EEPROM_write_1(Addr_autoT, BaudAddr+2); //BaudAddr[1] 写入eeprom
 287   2                  
 288   2                  IAP_CONTR = 0x20;
 289   2              
 290   2                  //delay_ms(1);
 291   2                  break;  
 292   2              
 293   2                case 0x0003:        //设置通讯速率，5--9600   6-19200
 294   2                  if((req_data==5) || (req_data==6))        
 295   2                  {
 296   3                      BaudAddr[0] = (uint8) req_data;       
 297   3                      EEPROM_write_1(Addr_Baud, BaudAddr);  //BaudAddr[0] 写入eeprom
 298   3                      
 299   3                      IAP_CONTR = 0x20;                   //重新启动
 300   3                  }
 301   2      
 302   2                  break;  
C51 COMPILER V9.59.0.0   RECESERVICE                                                       05/11/2023 16:22:32 PAGE 6   

 303   2                  
 304   2              //case 1:reg=PWM.Duty;break;                  //uint8_t
 305   2              //case 2:reg=ADC.ADC_Value;break;                 //uint16_t
 306   2              //case 3:reg=*(uint16*)&NTC.NTC_Temperature;break;    //float
 307   2              //case 3:
 308   2              //case 4:reg=*((uint16_t*)&NTC.NTC_Temperature+1);break;       
 309   2              //case 5:break;
 310   2              //case 6:reg=*(uint16_t*)&NTC.NTC_Voltage;break;
 311   2              //case 7:reg=*((uint16_t*)&NTC.NTC_Voltage+1);break;
 312   2              //case 8:break;                                           //预留
 313   2              //case 9:break;                                           
 314   2              //case 10:break;                                           
 315   2              //case 1001:reg=Modbus.uintaddr;break;                    //modbus从机地址  
 316   2              //case 1002:*err = DEVICE_FAILURE;break;                  //模拟读寄存器失败,错误码04
 317   2              
 318   2            default:*err=ILLEGAL_DATA_ADDR;break;                   //非法地址
 319   2        }
 320   1        return reg;
 321   1      }
 322          
 323          
 324          
 325          //modbusrtu定义部分
 326          /*
 327                          unsigned char crc_high8;//modbusrtu_crc16效验
 328                          unsigned char crc_low8;//modbusrtu_crc16效验
 329                          //modbusrtu_crc16效验测试数据包 //
 330                          //unsigned char data_CRC[6] = {0x03,0x10,0x00,0x01,0x00,0x08};//校验码91ED
 331                          //unsigned char data_CRC[6] = {0x01,0x05,0x00,0x00,0xFF,0x00};//校验码8C3A
 332                          //modbusrtu_crc16效验测试数据包 //
 333          */
 334          //modbusrtu定义部分
 335          
 336          //modbusrtu函数部分
 337          /* CRC高位字节值表*/ 
 338          const unsigned char code auchCRCHi[] = { //code表示存入ram
 339          0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 
 340          0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 
 341          0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 
 342          0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 
 343          0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 
 344          0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 
 345          0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 
 346          0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 
 347          0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 
 348          0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 
 349          0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 
 350          0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 
 351          0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 
 352          0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 
 353          0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 
 354          0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 
 355          0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 
 356          0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 
 357          0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 
 358          0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 
 359          0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 
 360          0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 
 361          0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 
 362          0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 
 363          0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 
 364          0x80, 0x41, 0x00, 0xC1, 0x81, 0x40} ;/* CRC高位字节值表*/  
C51 COMPILER V9.59.0.0   RECESERVICE                                                       05/11/2023 16:22:32 PAGE 7   

 365          /* CRC低位字节值表*/ 
 366          const unsigned char code auchCRCLo[] = { //code表示存入ram
 367          0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06, 
 368          0x07, 0xC7, 0x05, 0xC5, 0xC4, 0x04, 0xCC, 0x0C, 0x0D, 0xCD, 
 369          0x0F, 0xCF, 0xCE, 0x0E, 0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09, 
 370          0x08, 0xC8, 0xD8, 0x18, 0x19, 0xD9, 0x1B, 0xDB, 0xDA, 0x1A, 
 371          0x1E, 0xDE, 0xDF, 0x1F, 0xDD, 0x1D, 0x1C, 0xDC, 0x14, 0xD4, 
 372          0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3, 
 373          0x11, 0xD1, 0xD0, 0x10, 0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3, 
 374          0xF2, 0x32, 0x36, 0xF6, 0xF7, 0x37, 0xF5, 0x35, 0x34, 0xF4, 
 375          0x3C, 0xFC, 0xFD, 0x3D, 0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A, 
 376          0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38, 0x28, 0xE8, 0xE9, 0x29, 
 377          0xEB, 0x2B, 0x2A, 0xEA, 0xEE, 0x2E, 0x2F, 0xEF, 0x2D, 0xED, 
 378          0xEC, 0x2C, 0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26, 
 379          0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0, 0xA0, 0x60, 
 380          0x61, 0xA1, 0x63, 0xA3, 0xA2, 0x62, 0x66, 0xA6, 0xA7, 0x67, 
 381          0xA5, 0x65, 0x64, 0xA4, 0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F, 
 382          0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB, 0x69, 0xA9, 0xA8, 0x68, 
 383          0x78, 0xB8, 0xB9, 0x79, 0xBB, 0x7B, 0x7A, 0xBA, 0xBE, 0x7E, 
 384          0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5, 
 385          0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71, 
 386          0x70, 0xB0, 0x50, 0x90, 0x91, 0x51, 0x93, 0x53, 0x52, 0x92, 
 387          0x96, 0x56, 0x57, 0x97, 0x55, 0x95, 0x94, 0x54, 0x9C, 0x5C, 
 388          0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E, 0x5A, 0x9A, 0x9B, 0x5B, 
 389          0x99, 0x59, 0x58, 0x98, 0x88, 0x48, 0x49, 0x89, 0x4B, 0x8B, 
 390          0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C, 
 391          0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 
 392          0x43, 0x83, 0x41, 0x81, 0x80, 0x40} ;/* CRC低位字节值表*/ 
 393          
 394          unsigned int crc16(unsigned char *puchMsg, unsigned int usDataLen) //（待校验数据首地址，待校验数据位数）
 395          { 
 396   1        unsigned char uchCRCHi = 0xFF ; /* 高CRC字节初始化 */ 
 397   1        unsigned char uchCRCLo = 0xFF ; /* 低CRC 字节初始化 */ 
 398   1        unsigned long uIndex ; /* CRC循环中的索引 */ 
 399   1        while (usDataLen--) /* 传输消息缓冲区 */ 
 400   1        { 
 401   2          
 402   2          uIndex = uchCRCHi ^ *puchMsg++ ; /* 计算CRC */ 
 403   2          uchCRCHi = uchCRCLo ^ auchCRCHi[uIndex] ; /* 计算CRC高位 */ 
 404   2          uchCRCLo = auchCRCLo[uIndex] ;    /* 计算CRC低位 */ 
 405   2        } 
 406   1              //将得到的数据储存到crc 
 407   1              //crc_high8=uchCRCHi;
 408   1              //crc_low8=uchCRCLo;
 409   1        
 410   1              //将得到的数据放到串口接受用的数组中
 411   1        return (uchCRCHi << 8 | uchCRCLo) ; //返回值返回  
 412   1      }
 413          //modbusrtu函数部分
 414          //modbusrtu函数运行部分
 415                  //运行下面函数可以得到效验数据 一般是放到数组里面再发出去所以去掉//返回值返回  这一行
 416                  //可以主程序里加下面两行，上面的（//返回值返回  ）这行取消注释
 417                  //crc_high8=crc16(data_CRC,6)>>8;//crc高8位
 418                  //crc_low8=crc16(data_CRC,6) & 0xFF;//crc低8位
 419          
 420                  //crc16(data_CRC,6);//也可以在主程序中加上这个函数，函数运行后会把效验数据放到crc_high8,crc_low8这两个
             -全局变量里
 421          //modbusrtu函数运行部分
 422          
 423          
 424          
 425          /*********************************END FILE********************************************/ 
C51 COMPILER V9.59.0.0   RECESERVICE                                                       05/11/2023 16:22:32 PAGE 8   



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1652    ----
   CONSTANT SIZE    =    521    ----
   XDATA SIZE       =     40      91
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
